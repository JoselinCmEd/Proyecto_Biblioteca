import java.util.Comparator;

class NodoAVL {
    private Libro libro;
    private NodoAVL izq;
    private NodoAVL der;
    private int balance;
    private int altura;

    public NodoAVL(Libro libro) {
        this.libro = libro;
        this.altura = 1;
    }

    public Libro getLibro() {
        return libro;
    }

    public void setLibro(Libro libro) {
        this.libro=libro;
    }

    public NodoAVL getIzq() {
        return izq;
    }

    public void setIzq(NodoAVL izq) {
        this.izq = izq;
    }

    public NodoAVL getDer() {
        return der;
    }

    public void setDer(NodoAVL der) {
        this.der = der;
    }
    
    public int getBalance(){
        return this.balance;
    }
    public void setBalance(int balance){
        this.balance=balance;
    }
    public int getAltura() {
        return altura;
    }

    public void setAltura(int altura) {
        this.altura = altura;
    }
}


public class ArbolAVL {
    private NodoAVL raiz;
    private Comparator<Libro> comparador;

    public ArbolAVL(Comparator<Libro> comparador) {
        this.raiz = null;
        this.comparador = comparador;
    }

    public void insertar(Libro libro) {
        this.raiz = generarNodo(libro, raiz);
    }

    private NodoAVL generarNodo(Libro libro, NodoAVL nodo) {
        if (nodo == null) {
            return new NodoAVL(libro);
        }

        if (comparador.compare(libro, nodo.getLibro()) < 0) {
            nodo.setIzq(generarNodo(libro, nodo.getIzq()));
        } else if (comparador.compare(libro, nodo.getLibro()) > 0) {
            nodo.setDer(generarNodo(libro, nodo.getDer()));
        } else {
            return nodo;
        }

        nodo.setAltura(1 + Math.max(determinarAltura(nodo.getIzq()), determinarAltura(nodo.getDer())));
        int balance = determinarBalance(nodo);

        
        if (balance > 1 && comparador.compare( libro, nodo.getDer().getLibro()) > 0) {
            return rotacionIzq(nodo);
        }

        if (balance < -1 && comparador.compare(libro, nodo.getIzq().getLibro()) < 0) {
            return rotacionDer(nodo);
        }

        if (balance > 1 && comparador.compare(libro, nodo.getDer().getLibro()) < 0) {
            nodo.setDer(rotacionDer(nodo.getDer()));
            return rotacionIzq(nodo);
        }

        if (balance < -1 && comparador.compare(libro, nodo.getIzq().getLibro()) > 0) {
            nodo.setIzq(rotacionIzq(nodo.getIzq()));
            return rotacionDer(nodo);
        }

        return nodo;
    }

    private int determinarAltura(NodoAVL nodo) {
        return (nodo == null) ? 0 : nodo.getAltura();
    }

    private int determinarBalance(NodoAVL nodo) {
        return (nodo == null) ? 0 : determinarAltura(nodo.getDer()) - determinarAltura(nodo.getIzq());
    }

    private NodoAVL rotacionIzq(NodoAVL x) {
        NodoAVL y = x.getDer();
        NodoAVL z = y.getIzq();

        y.setIzq(x);
        x.setDer(z);

        x.setAltura(1 + Math.max(determinarAltura(x.getIzq()), determinarAltura(x.getDer())));
        y.setAltura(1 + Math.max(determinarAltura(y.getIzq()), determinarAltura(y.getDer())));

        return y;
    }

    private NodoAVL rotacionDer(NodoAVL x) {
        NodoAVL y = x.getIzq();
        NodoAVL z = y.getDer();

        y.setDer(x);
        x.setIzq(z);

        x.setAltura(1 + Math.max(determinarAltura(x.getIzq()), determinarAltura(x.getDer())));
        y.setAltura(1 + Math.max(determinarAltura(y.getIzq()), determinarAltura(y.getDer())));

        return y;
    }

   

    public Libro eliminar(Libro libro) {
        NodoAVL[] resultado = eliminarRecursivo(raiz, libro);
        raiz = resultado[0];
        return resultado[1] != null ? resultado[1].getLibro() : null;
    }

    private NodoAVL[] eliminarRecursivo(NodoAVL nodo, Libro libro) {
        if (nodo == null) {
            return new NodoAVL[]{null, null}; 
        }

        NodoAVL[] resultado = new NodoAVL[2];
        int comparacion = comparador.compare(libro, nodo.getLibro());

        if (comparacion < 0) {
            NodoAVL[] temp = eliminarRecursivo(nodo.getIzq(), libro);
            nodo.setIzq(temp[0]);
            resultado[1] = temp[1];
        } else if (comparacion > 0) {
            NodoAVL[] temp = eliminarRecursivo(nodo.getDer(), libro);
            nodo.setDer(temp[0]);
            resultado[1] = temp[1];
        } else {
            resultado[1] = nodo;

            if (nodo.getIzq() == null) {
                return new NodoAVL[]{nodo.getDer(), nodo};
            } else if (nodo.getDer() == null) {
                return new NodoAVL[]{nodo.getIzq(), nodo};
            } else {
                NodoAVL sucesor = encontrarMinimo(nodo.getDer());
                nodo.setLibro(sucesor.getLibro());
                NodoAVL[] temp = eliminarRecursivo(nodo.getDer(), sucesor.getLibro());
                nodo.setDer(temp[0]);
            }
        }

        nodo.setAltura(1 + Math.max(determinarAltura(nodo.getIzq()), determinarAltura(nodo.getDer())));
        int balance = determinarBalance(nodo);

        
        if (balance > 1 && determinarBalance(nodo.getDer()) >= 0) {
            return new NodoAVL[]{rotacionIzq(nodo), resultado[1]};
        }

        if (balance > 1 && determinarBalance(nodo.getDer()) < 0) {
            nodo.setDer(rotacionDer(nodo.getDer()));
            return new NodoAVL[]{rotacionIzq(nodo), resultado[1]};
        }

        if (balance < -1 && determinarBalance(nodo.getIzq()) <= 0) {
            return new NodoAVL[]{rotacionDer(nodo), resultado[1]};
        }

        if (balance < -1 && determinarBalance(nodo.getIzq()) > 0) {
            nodo.setIzq(rotacionIzq(nodo.getIzq()));
            return new NodoAVL[]{rotacionDer(nodo), resultado[1]};
        }

        return new NodoAVL[]{nodo, resultado[1]};
    }

    private NodoAVL encontrarMinimo(NodoAVL nodo) {
        while (nodo.getIzq() != null) {
            nodo = nodo.getIzq();
        }
        return nodo;
    }

     public Libro buscar(Libro clave) {
        return buscar(raiz, clave);
    }

    private Libro buscar(NodoAVL nodo, Libro clave) {
        if (nodo == null) {
            return null;
        }

        int comparacion = comparador.compare(clave, nodo.getLibro());

        if (comparacion == 0) {
            return nodo.getLibro();
        } else if (comparacion < 0) {
            return buscar(nodo.getIzq(), clave);
        } else {
            return buscar(nodo.getDer(), clave);
        }
    }

    public void imprimir() {
        imprimir(raiz);
    }

    private void imprimir(NodoAVL nodo) {
        if (nodo != null) {
            imprimir(nodo.getIzq());
            System.out.println(nodo.getLibro());
            imprimir(nodo.getDer());
        }
    }

}
